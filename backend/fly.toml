# fly.toml app configuration file generated for universal-file-converter-backend
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
# Replace 'universal-file-converter-backend' with your actual app name on Fly.io
app = "universal-file-converter-backend"
primary_region = "iad" # Example: Choose a region close to you or your users

[build]
  # We are using a Dockerfile in the 'backend' directory
  dockerfile = "Dockerfile"
  # Ensure the build context is set correctly if fly.toml is not in the same dir as Dockerfile
  # Since fly.toml is in 'backend/' alongside Dockerfile, context="." is likely correct within backend.

# Defines the main web service
[http_service]
  internal_port = 8000 # Port the app listens on inside the container (matches Dockerfile EXPOSE)
  force_https = true
  auto_stop_machines = true # Stop machines when idle (saves cost on free tier)
  auto_start_machines = true # Start machines on demand
  min_machines_running = 0 # Allow scaling to zero for free tier
  processes = ["app"] # Matches the [processes] section below

# Health checks for the web service
[[http_service.checks]]
  interval = "10s"
  timeout = "2s"
  grace_period = "5s"
  method = "get"
  path = "/health" # Matches the health check endpoint in main.py
  protocol = "http"

# Define background worker process (for Celery)
[processes]
  app = "" # Handled by http_service CMD
  # Command to run the Celery worker
  # Ensure the command is correct based on how celery_app is defined and the working directory in the Docker image (/app)
  # Needs celery binary installed via requirements.txt
  worker = "celery -A core.celery_app worker --loglevel=info -Q celery"

# Example volume for persistent temporary storage (if needed)
# [mounts]
#   source="temp_data"
#   destination="/app/temp_uploads" # Mount inside the container where temp files are written 